@@ set terp_project_name       $param0
@@ set terp_subsystem_name     $param1
@@ set terp_cpu_type           $param2
@@ set terp_bsp_type		       $param3
@@ set terp_bsp_settings_file  $param4
@@ set terp_app_cmakefile      $param5
@@ set terp_app_makefile       $param6
@@ set terp_memory_base        $param7
@@ set terp_memory_end         $param8
@@
@@ # All terp variables have the prefix "terp_" and are lower case to avoid
@@ # confusion with makefile variables which are upper case
@@
#------------------------------------------------------------------------------
#                        Shell Design Toolkit MAKEFILE                         
#
# This makefile was automatically generated by the Shell Design Tookit during
# evaluation of the create_shell.tcl script. Its purpose is to automate the
# BSP generation, and software compilation of a subsystem containing a CPU
# 
# It is not recommended to directly run the recipes in this file, instead
# use the helper script, build_shell.tcl in the scripts directory
#
# This makefile is targeted to work for the following CPU subsystem:
# ${terp_subsystem_name} with CPU type ${terp_cpu_type}
# 
#------------------------------------------------------------------------------
#
# Notes on using a custom bsp settings file, or a custom Makefile
#
# The bsp settings file will be moved to (or created in) the software 
# directory. This makefile will automatically update the settings.bsp file
# to point to the correct .sopcinfo or .qsys file, and the location of the
# bsp directory.
#
# The application makefile is expected to be located at the top level in the 
# application folder and will be executed in place.
#
# - The default recipe must create an elf file and all required .hex files
# - All paths should be relative
# 
# The file app_variables.mk file in the software directory should be included
# in the custom makefile and the following variables used
# 
# - BSP_DIR  			  : path of the BSP generation directory
# - BIN_DIR				  : path of the application build directory
# - ELF_NAME 			  : name of the application .elf file
# - ELF_FILE_PATH		  : path of the application .elf file
# - MEMORY_INIT_NAME 	  : name of the memory initialisation file
# - MEMORY_INIT_FILE_PATH : path of the memory initialisation file
#
#------------------------------------------------------------------------------
#                                 TOOLS
#------------------------------------------------------------------------------

MKDIR := mkdir -p
ECHO := echo
SPACE := \$(empty) \$(empty)

#------------------------------------------------------------------------------
#                         The adjust-path macro
#
# If Make is launched from Windows through
# Windows Subsystem for Linux (WSL).  The adjust-path macro converts absolute windows 
# paths into unix style paths (Example: c:/dir -> /c/dir). 
# The adjust_path_mixed function converts WSL path to Windows path.
# This will ensure paths are readable by GNU Make.
#------------------------------------------------------------------------------

UNAME = \$(shell uname -r | tr A-Z a-z)
ifeq (\$(findstring microsoft,\$(UNAME)),microsoft)
	WINDOWS_EXE = .exe
endif

eq = \$(and \$(findstring \$(1),\$(2)),\$(findstring \$(2),\$(1)))

ifdef WINDOWS_EXE 
	adjust-path = \$(if \$1,\$(if \$(filter \$1,.),.,\$(shell wslpath "\$1")),)
	adjust-path-mixed = \$(if \$(call eq,\$(shell echo \$1 | head -c 5),/mnt/),\$(shell echo \$1 | sed 's/\/mnt\///g;s/\//:\//1'),\$1)
	
else # !WINDOWS_EXE
	adjust-path = \$1
	adjust-path-mixed = \$1
endif

#------------------------------------------------------------------------------
#                               DEFAULT TARGET
#
# The default target, "all", must appear before any other target in the
# Makefile. Note that extra prerequisites are added to the "all" rule later.
#------------------------------------------------------------------------------
.PHONY: all
all:
	@\$(ECHO) [Software build complete]

#------------------------------------------------------------------------------
#                              MANAGED CONTENT
#
# All content between the lines "START MANAGED" and "END MANAGED" below is
# is generated based on variables in the Shell Design Toolkit .xml file used 
# with the create_shell.tcl script. To set any variable to a specific value
# when this Makefile is re-generated (to prevent hand-edits from being 
# overwitten), make to appropriate edits to the .xml file.
#------------------------------------------------------------------------------

#START MANAGED

# Name of the top level Quartus project
PROJECT_NAME := ${terp_project_name}

# Name of the subsystem instance
SUBSYSTEM_NAME := ${terp_subsystem_name}
BSP_TYPE := ${terp_bsp_type}
@@ if {$terp_bsp_settings_file != ""} {
BSP_SETTINGS_FILE_NAME := ${terp_bsp_settings_file}
@@ } else {
BSP_SETTINGS_FILE_NAME := settings.bsp
@@ }
@@ if {$terp_app_cmakefile != ""} {
APP_CMAKEFILE := ${terp_app_cmakefile}
@@ }
@@ if {$terp_app_makefile != ""} {
APP_MAKEFILE := ${terp_app_makefile}
@@ }

#END MANAGED

#------------------------------------------------------------------------------
#                              STATIC CONTENT
#
# All content between the lines "START STATIC" and "END STATIC" below is
# is generated based on the fixed directory structure of the created by the
# Shell Design Toolkit, and hard coded settings. These cannot be modified.
#------------------------------------------------------------------------------

#START STATIC

#------------------------------------------------------------------------------
#                           PATHS & DIRECTORY NAMES
#------------------------------------------------------------------------------

# The root directory of the project relative to current file
PROJECT_ROOT_DIR := ./../..

# TODO: use hard coded locations for now, change to user locations if provided
# source directories
APP_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/app
INC_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/app
SRC_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/app
LIB_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/lib

# Output directory for the BSP generation
BSP_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/build/bsp

# Output directory for the application compilation
BIN_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/build/bin

LIB_PATH := $$

ifneq ("\${wildcard \${LIB_DIR}}","")
	LIB_PATH += ,\${LIB_DIR}
endif

#------------------------------------------------------------------------------
#                                 BSP SETTINGS
#------------------------------------------------------------------------------

@@ if {$terp_bsp_settings_file != ""} {
BSP_SETTINGS_FILE := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/\${BSP_SETTINGS_FILE_NAME}
@@ }

# Location of the Quartus project, and Platform Designer files
QUARTUS_PROJ_FILE := \${PROJECT_ROOT_DIR}/quartus/\${PROJECT_NAME}.qpf               
TOP_QSYS_FILE := \${PROJECT_ROOT_DIR}/rtl/\${PROJECT_NAME}_qsys.qsys          

#------------------------------------------------------------------------------
#                             APPLICATION SETTINGS
#------------------------------------------------------------------------------
     
MEMORY_INIT_NAME := \${SUBSYSTEM_NAME}_cpu_ram_cpu_ram.hex
ELF_NAME := app.elf

#END STATIC

#-------------------------------------------------------------------------------
#                             TOOL & COMMAND DEFINITIONS
# 
# The base command for each build operation are expressed here. Additional
# switches may be expressed here. They will run for all instances of the 
# utility.
#-------------------------------------------------------------------------------

@@ if {$terp_bsp_settings_file == ""} {
@@
GENERATE_BSP := niosv-bsp -c --quartus-project=\${QUARTUS_PROJ_FILE} --qsys=\${TOP_QSYS_FILE} --type=\${BSP_TYPE} --bsp-dir=\${BSP_DIR} -e="set_setting hal.make.asflags none" -i=\${SUBSYSTEM_NAME}_cpu \${BSP_DIR}/\${BSP_SETTINGS_FILE_NAME}
@@
@@ } else { 
@@
define GENERATE_BSP
  mkdir -p \${BSP_DIR}
  cp \${BSP_SETTINGS_FILE_NAME} \${BSP_DIR}/\${BSP_SETTINGS_FILE_NAME}
  niosv-bsp -g --bsp-dir=\${BSP_DIR} \${BSP_DIR}/\${BSP_SETTINGS_FILE_NAME}
endef
@@
@@ } 
@@

@@ if {$terp_app_cmakefile == 1} {
@@
define BUILD_APP
  cmake \${APP_DIR} -S \${APP_DIR} -G "Unix Makefiles" -B \${BIN_DIR} -DCMAKE_C_FLAGS="-O3 -Wformat -Wformat-security -Werror=format-security -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fstack-clash-protection -Wall" -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXE_LINKER_FLAGS="-Wl,-z,pie -Wl,-z,relro -Wl,-z,now -Wl,-z,noexecstack"
  make --directory=\${BIN_DIR}
  mkdir -p \${BIN_DIR}/mem_init
  elf2hex \${BIN_DIR}/\${ELF_NAME} -o \${BIN_DIR}/mem_init/\${MEMORY_INIT_NAME} -r 4 -b ${terp_memory_base} -w 32 -e ${terp_memory_end}
endef
@@
@@ } elseif {$terp_app_makefile == 1} {
@@
BUILD_APP := make --directory=\${APP_DIR}
@@
@@ } else {
@@
define BUILD_APP
  niosv-app --bsp-dir=\${BSP_DIR} --app-dir=\${BIN_DIR} --srcs-recursive=\${APP_DIR} --incs-recursive=\${APP_DIR} --elf-name=\${ELF_NAME}
  cmake \${BIN_DIR} -B \${BIN_DIR} -G "Unix Makefiles" 
  make --directory=\${BIN_DIR}
  mkdir -p \${BIN_DIR}/mem_init
  elf2hex \${BIN_DIR}/\${ELF_NAME} -o \${BIN_DIR}/mem_init/\${MEMORY_INIT_NAME} -r 4 -b ${terp_memory_base} -w 32 -e ${terp_memory_end}
endef
@@
@@ }

#------------------------------------------------------------------------------
#                          BUILD RULES: ALL & CLEAN
#------------------------------------------------------------------------------
.DELETE_ON_ERROR:

.PHONY: all
all: generate_bsp
all: build_app

generate_bsp:
	\${GENERATE_BSP}

build_app:
	\${BUILD_APP}

.PHONY: generate_bsp build_app

.PHONY: clean
clean: clean_bsp 
clean: clean_app

# Remove the created directories, rather than a traditional "clean"
clean_bsp:
	rm -rf \${BSP_DIR}

clean_app:
	rm -rf \${BIN_DIR}

.PHONY: clean_bsp clean_app

# End of Makefile
