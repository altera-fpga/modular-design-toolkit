@@ set terp_project_name       $param0
@@ set terp_subsystem_name     $param1
@@ set terp_cpu_type           $param2
@@ set terp_bsp_type		       $param3
@@ set terp_bsp_settings_file  $param4
@@ set terp_app_cmakefile      $param5
@@ set terp_app_makefile       $param6
@@
@@ # All terp variables have the prefix "terp_" and are lower case to avoid
@@ # confusion with makefile variables which are upper case
@@
#------------------------------------------------------------------------------
#                        Shell Design Toolkit MAKEFILE                         
#
# This makefile was automatically generated by the Shell Design Tookit during
# evaluation of the create_shell.tcl script. Its purpose is to automate the
# BSP generation, and software compilation of a subsystem containing a CPU
# 
# It is not recommended to directly run the recipes in this file, instead
# use the helper script, build_shell.tcl in the scripts directory
#
# This makefile is targeted to work for the following CPU subsystem:
# ${terp_subsystem_name} with CPU type ${terp_cpu_type}
# 
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
#                                 TOOLS
#------------------------------------------------------------------------------

MKDIR := mkdir -p
ECHO := echo
SPACE := \$(empty) \$(empty)

#------------------------------------------------------------------------------
#                         The adjust-path macro
#
# If Make is launched from Windows through
# Windows Subsystem for Linux (WSL).  The adjust-path macro converts absolute windows 
# paths into unix style paths (Example: c:/dir -> /c/dir). 
# The adjust_path_mixed function converts WSL path to Windows path.
# This will ensure paths are readable by GNU Make.
#------------------------------------------------------------------------------

UNAME = \$(shell uname -r | tr A-Z a-z)
ifeq (\$(findstring microsoft,\$(UNAME)),microsoft)
	WINDOWS_EXE = .exe
endif

eq = \$(and \$(findstring \$(1),\$(2)),\$(findstring \$(2),\$(1)))

ifdef WINDOWS_EXE 
	adjust-path = \$(if \$1,\$(if \$(filter \$1,.),.,\$(shell wslpath "\$1")),)
	adjust-path-mixed = \$(if \$(call eq,\$(shell echo \$1 | head -c 5),/mnt/),\$(shell echo \$1 | sed 's/\/mnt\///g;s/\//:\//1'),\$1)
	
else # !WINDOWS_EXE
	adjust-path = \$1
	adjust-path-mixed = \$1
endif

#------------------------------------------------------------------------------
#                               DEFAULT TARGET
#
# The default target, "all", must appear before any other target in the
# Makefile. Note that extra prerequisites are added to the "all" rule later.
#------------------------------------------------------------------------------
.PHONY: all
all:
	@\$(ECHO) [Software build complete]

#------------------------------------------------------------------------------
#                              MANAGED CONTENT
#
# All content between the lines "START MANAGED" and "END MANAGED" below is
# is generated based on variables in the Shell Design Toolkit .xml file used 
# with the create_shell.tcl script. To set any variable to a specific value
# when this Makefile is re-generated (to prevent hand-edits from being 
# overwitten), make to appropriate edits to the .xml file.
#------------------------------------------------------------------------------

#START MANAGED

# Name of the top level Quartus project
PROJECT_NAME := ${terp_project_name}

# Name of the subsystem instance
SUBSYSTEM_NAME := ${terp_subsystem_name}
@@ if {$terp_app_cmakefile != ""} {
APP_CMAKEFILE := ${terp_app_cmakefile}
@@ }
@@ if {$terp_app_makefile != ""} {
APP_MAKEFILE := ${terp_app_makefile}
@@ }

#END MANAGED

#------------------------------------------------------------------------------
#                              STATIC CONTENT
#
# All content between the lines "START STATIC" and "END STATIC" below is
# is generated based on the fixed directory structure of the created by the
# Shell Design Toolkit, and hard coded settings. These cannot be modified.
#------------------------------------------------------------------------------

#START STATIC

#------------------------------------------------------------------------------
#                           PATHS & DIRECTORY NAMES
#------------------------------------------------------------------------------

# The root directory of the project relative to current file
PROJECT_ROOT_DIR := ./../..

# TODO: use hard coded locations for now, change to user locations if provided
# source directories
APP_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/app

# Output directory for the application compilation
BIN_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/build

#END STATIC

#-------------------------------------------------------------------------------
#                             TOOL & COMMAND DEFINITIONS
# 
# The base command for each build operation are expressed here. Additional
# switches may be expressed here. They will run for all instances of the 
# utility.
#-------------------------------------------------------------------------------

@@ if {$terp_app_cmakefile == 1} {
@@
define BUILD_APP
  cmake \${APP_DIR} -S \${APP_DIR} -G "Unix Makefiles" -B \${BIN_DIR}
  make --directory=\${BIN_DIR}
endef
@@
@@ } elseif {$terp_app_makefile == 1} {
@@
BUILD_APP := make --directory=\${APP_DIR}
@@
@@ }

#------------------------------------------------------------------------------
#                          BUILD RULES: ALL & CLEAN
#------------------------------------------------------------------------------
.DELETE_ON_ERROR:

.PHONY: all
all: build_app

build_app:
	\${BUILD_APP}

.PHONY: build_app

.PHONY: clean
clean: clean_app

# Remove the created directories, rather than a traditional "clean"

clean_app:
	rm -rf \${BIN_DIR}

.PHONY: clean_app

# End of Makefile