###################################################################################
# Copyright (C) 2025 Altera Corporation
#
# This software and the related documents are Altera copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Altera's prior written permission.
#
# This software and the related documents are provided as is, with no express
# or implied warranties, other than those that are expressly stated in the License.
###################################################################################
@@
@@ set terp_project_name       $param0
@@ set terp_subsystem_name     $param1
@@ set terp_cpu_type           $param2
@@ set terp_bsp_type		   $param3
@@ set terp_bsp_settings_file  $param4
@@ set terp_app_cmakefile      $param5
@@ set terp_app_makefile       $param6
@@
#
# This makefile was automatically generated by the Modular Design Toolkit during
# evaluation of the create_shell.tcl script. It automates software compilation
# of the HPS subsystem (${terp_subsystem_name})
#
# It is not recommended to directly run the recipes in this file, instead
# use the helper script, build_shell.tcl in the scripts directory
#
###################################################################################

#------------------------------------------------------------------------------
#                                 TOOLS
#------------------------------------------------------------------------------

ECHO := echo

#------------------------------------------------------------------------------
#                         The adjust-path macro
#
# If Make is launched from Windows through
# Windows Subsystem for Linux (WSL).  The adjust-path macro converts absolute windows
# paths into unix style paths (Example: c:/dir -> /c/dir).
# The adjust_path_mixed function converts WSL path to Windows path.
# This will ensure paths are readable by GNU Make.
#------------------------------------------------------------------------------

UNAME = \$(shell uname -r | tr A-Z a-z)
ifeq (\$(findstring microsoft,\$(UNAME)),microsoft)
	WINDOWS_EXE = .exe
endif

eq = \$(and \$(findstring \$(1),\$(2)),\$(findstring \$(2),\$(1)))

ifdef WINDOWS_EXE
	adjust-path = \$(if \$1,\$(if \$(filter \$1,.),.,\$(shell wslpath "\$1")),)
	adjust-path-mixed = \$(if \$(call eq,\$(shell echo \$1 | head -c 5),/mnt/),\$(shell echo \$1 | sed 's/\/mnt\///g;s/\//:\//1'),\$1)

else # !WINDOWS_EXE
	adjust-path = \$1
	adjust-path-mixed = \$1
endif

#------------------------------------------------------------------------------
#                               DEFAULT TARGET
#
# The default target, "all", must appear before any other target in the
# Makefile. Note that extra prerequisites are added to the "all" rule later.
#------------------------------------------------------------------------------

.PHONY: all
all:
	@\$(ECHO) [Software build complete]

#------------------------------------------------------------------------------
#                              MANAGED CONTENT
#
# All content between the lines "START MANAGED" and "END MANAGED" is generated
# based on parameter values set in the design xml file.
#------------------------------------------------------------------------------

# START MANAGED

PROJECT_NAME   := ${terp_project_name}
SUBSYSTEM_NAME := ${terp_subsystem_name}
@@ if {$terp_app_cmakefile != ""} {

APP_CMAKEFILE  := ${terp_app_cmakefile}
@@ }
@@ if {$terp_app_makefile != ""} {

APP_MAKEFILE   := ${terp_app_makefile}
@@ }

# END MANAGED

#------------------------------------------------------------------------------
#                              STATIC CONTENT
#
# All content between the lines "START STATIC" and "END STATIC" is generated
# based on the fixed directory structure used by the Modular Design Toolkit.
#------------------------------------------------------------------------------

# START STATIC

#------------------------------------------------------------------------------
#                           PATHS & DIRECTORY NAMES
#------------------------------------------------------------------------------

PROJECT_ROOT_DIR := ./../..

# Source directories
APP_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/app

# Output directories
BIN_DIR := \${PROJECT_ROOT_DIR}/software/\${SUBSYSTEM_NAME}/build

# END STATIC

#-------------------------------------------------------------------------------
#                             TOOL & COMMAND DEFINITIONS
#
# The base commands for each build operation are expressed here.
#-------------------------------------------------------------------------------
@@
@@ if {$terp_app_cmakefile == 1} {
@@

define BUILD_APP
	cmake \${APP_DIR} -S \${APP_DIR} -G "Unix Makefiles" -B \${BIN_DIR}
	make --directory=\${BIN_DIR}
endef
@@
@@ } elseif {$terp_app_makefile == 1} {
@@

BUILD_APP := make --directory=\${APP_DIR}
@@
@@ }

#------------------------------------------------------------------------------
#                          BUILD RULES: ALL & CLEAN
#------------------------------------------------------------------------------

.DELETE_ON_ERROR:

.PHONY: all
all: build_app

build_app:
	\${BUILD_APP}

.PHONY: build_app

.PHONY: clean
clean: clean_app

clean_app:
	rm -rf \${BIN_DIR}

.PHONY: clean_app

# End of Makefile
